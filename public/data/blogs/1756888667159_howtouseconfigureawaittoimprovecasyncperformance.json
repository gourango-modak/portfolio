{
  "id": 1756888667159,
  "title": "How to Use ConfigureAwait to Improve C# Async Performance",
  "createdAt": 1756888666486,
  "tags": [],
  "description": "Learn how to boost your C# async code performance using ConfigureAwait. This blog explains the concept in simple terms with practical examples for faster, scalable, and deadlock-free applications.",
  "slug": "how-to-use-configureawait-to-improve-c-async-performance",
  "content": {
    "time": 1756888661462,
    "blocks": [
      {
        "id": "Z5Kxk5GPAE",
        "type": "paragraph",
        "data": {
          "text": "Asynchronous programming in .NET helps apps stay responsive and handle multiple tasks at the same time. But if you want your async code to be fast and efficient, you need to understand ConfigureAwait."
        }
      },
      {
        "id": "N4W9LBP_jZ",
        "type": "paragraph",
        "data": {
          "text": "In this post, we’ll explain ConfigureAwait in simple terms, why it matters for performance, and show examples you can try."
        }
      },
      {
        "id": "-NP781850b",
        "type": "header",
        "data": {
          "text": "What Happens When You Use <code class=\"bg-[#303030] text-white font-mono px-1 py-[2px] rounded\" style=\"font-weight: normal;\">await</code>",
          "level": 2
        }
      },
      {
        "id": "nA2QmgOvOF",
        "type": "paragraph",
        "data": {
          "text": "When you <code class=\"bg-[#303030] text-white font-mono px-1 py-[2px] rounded\">await</code> a task in C#, the program pauses until the task finishes. Then it resumes from where it left off. By default, it tries to resume on the same thread it started on."
        }
      },
      {
        "id": "-3AjTyGZNE",
        "type": "paragraph",
        "data": {
          "text": "This is important for <b>UI apps</b> (like WPF or WinForms) because UI controls can only be updated from the main thread."
        }
      },
      {
        "id": "4ahKSgPTZT",
        "type": "code",
        "data": {
          "language": "",
          "code": "//csharp\npublic async Task LoadDataAsync()\n{\n    // Running on the UI thread\n    var data = await GetDataFromApiAsync(); // pauses here\n    myLabel.Text = data; // resumes on UI thread safely\n}"
        }
      },
      {
        "id": "w_OEbY1-No",
        "type": "paragraph",
        "data": {
          "text": "Works perfectly for UI apps. But in server apps (like ASP.NET Core), this “same thread” rule adds unnecessary overhead, slowing your app."
        }
      },
      {
        "id": "jAbccDKKBB",
        "type": "header",
        "data": {
          "text": "What is <code class=\"bg-[#303030] text-white font-mono px-1 py-[2px] rounded\" style=\"font-weight: normal;\">ConfigureAwait</code>?",
          "level": 2
        }
      },
      {
        "id": "aFxHjFQ3iy",
        "type": "list",
        "data": {
          "style": "unordered",
          "meta": {},
          "items": [
            {
              "content": "<code class=\"bg-[#303030] text-white font-mono px-1 py-[2px] rounded\">ConfigureAwait</code> tells C# whether to resume on the same thread or not.",
              "meta": {},
              "items": []
            },
            {
              "content": "<code class=\"bg-[#303030] text-white font-mono px-1 py-[2px] rounded\">ConfigureAwait</code>(true) → default behavior, resumes on the original thread.",
              "meta": {},
              "items": []
            },
            {
              "content": "<code class=\"bg-[#303030] text-white font-mono px-1 py-[2px] rounded\">ConfigureAwait</code>(false) → allows resuming on any available thread, skipping context capture.",
              "meta": {},
              "items": []
            }
          ]
        }
      },
      {
        "id": "a4KLR9FfAR",
        "type": "header",
        "data": {
          "text": "Why It Matters",
          "level": 3
        }
      },
      {
        "id": "GLU7RiLydt",
        "type": "paragraph",
        "data": {
          "text": "Skipping the original thread:"
        }
      },
      {
        "id": "Mh0FGY_v7p",
        "type": "list",
        "data": {
          "style": "unordered",
          "meta": {},
          "items": [
            {
              "content": "Reduces delays caused by switching threads.\n",
              "meta": {},
              "items": []
            },
            {
              "content": "Makes server apps faster and more scalable.\n",
              "meta": {},
              "items": []
            },
            {
              "content": "Prevents certain deadlocks in synchronous code.\n",
              "meta": {},
              "items": []
            }
          ]
        }
      },
      {
        "id": "PGcsz9B0hx",
        "type": "header",
        "data": {
          "text": "Simple Example",
          "level": 2
        }
      },
      {
        "id": "Xuo0r8UcA7",
        "type": "paragraph",
        "data": {
          "text": "Without <code class=\"bg-[#303030] text-white font-mono px-1 py-[2px] rounded\">ConfigureAwait(false)</code>"
        }
      },
      {
        "id": "VLbuxoqP9Q",
        "type": "code",
        "data": {
          "language": "",
          "code": "//csharp\npublic async Task<int> CalculateAsync()\n{\n    Console.WriteLine($\"Start on Thread {Thread.CurrentThread.ManagedThreadId}\");\n    await Task.Delay(1000); // wait for 1 second\n    Console.WriteLine($\"Resume on Thread {Thread.CurrentThread.ManagedThreadId}\");\n    return 42;\n}"
        }
      },
      {
        "id": "sn9siQAzAI",
        "type": "paragraph",
        "data": {
          "text": "The continuation may resume on the same thread, even when it’s not needed, which can waste resources."
        }
      },
      {
        "id": "iB0i2Jllp_",
        "type": "paragraph",
        "data": {
          "text": "With <code class=\"bg-[#303030] text-white font-mono px-1 py-[2px] rounded\">ConfigureAwait(false)</code>"
        }
      },
      {
        "id": "2OD7JtbCAy",
        "type": "code",
        "data": {
          "language": "",
          "code": "//csharp\npublic async Task<int> CalculateAsync()\n{\n    Console.WriteLine($\"Start on Thread {Thread.CurrentThread.ManagedThreadId}\");\n    await Task.Delay(1000).ConfigureAwait(false); // skip original thread\n    Console.WriteLine($\"Resume on Thread {Thread.CurrentThread.ManagedThreadId}\");\n    return 42;\n}"
        }
      },
      {
        "id": "kQy7gy8V-t",
        "type": "paragraph",
        "data": {
          "text": "Now, the continuation can run on any available thread, making it faster and more efficient."
        }
      },
      {
        "id": "q60z7HxML1",
        "type": "header",
        "data": {
          "text": "Real-Life Scenario in ASP.NET Core",
          "level": 2
        }
      },
      {
        "id": "CiPQxisiY2",
        "type": "paragraph",
        "data": {
          "text": "Imagine your web app handles 100 simultaneous requests, each fetching data from a database."
        }
      },
      {
        "id": "cjyLVQKp4f",
        "type": "list",
        "data": {
          "style": "unordered",
          "meta": {},
          "items": [
            {
              "content": "Without <code class=\"bg-[#303030] text-white font-mono px-1 py-[2px] rounded\">ConfigureAwait(false)</code>, each request waits for the continuation to return to the original request thread → slows down throughput.",
              "meta": {},
              "items": []
            },
            {
              "content": "With <code class=\"bg-[#303030] text-white font-mono px-1 py-[2px] rounded\">ConfigureAwait(false)</code>, continuations run on free thread pool threads, improving response time and scalability.",
              "meta": {},
              "items": []
            }
          ]
        }
      },
      {
        "id": "R7LP-70AFA",
        "type": "code",
        "data": {
          "language": "",
          "code": "//csharp\npublic async Task<IActionResult> GetUsers()\n{\n    var users = await _userService.GetAllUsersAsync().ConfigureAwait(false);\n    return Ok(users); // safe in ASP.NET Core, no UI thread needed\n}"
        }
      },
      {
        "id": "iYRb7H5ISA",
        "type": "header",
        "data": {
          "text": "Best Practices",
          "level": 2
        }
      },
      {
        "id": "gBYXNsUKfp",
        "type": "list",
        "data": {
          "style": "ordered",
          "meta": {},
          "items": [
            {
              "content": "Use <code class=\"bg-[#303030] text-white font-mono px-1 py-[2px] rounded\">ConfigureAwait(false)</code> in library and server code.\n",
              "meta": {},
              "items": []
            },
            {
              "content": "In UI code, only use it if you don’t need to update UI controls afterward.\n",
              "meta": {},
              "items": []
            },
            {
              "content": "Never access UI elements after <code data-start=\"3493\" data-end=\"3516\">ConfigureAwait(false)</code> in a UI app — it may crash.\n",
              "meta": {},
              "items": []
            }
          ]
        }
      },
      {
        "id": "sngSUBdu6W",
        "type": "header",
        "data": {
          "text": "Key Takeaways",
          "level": 2
        }
      },
      {
        "id": "sq3VYHLxC9",
        "type": "list",
        "data": {
          "style": "unordered",
          "meta": {},
          "items": [
            {
              "content": "<code data-start=\"3571\" data-end=\"3594\">ConfigureAwait(false)</code> improves performance by skipping unnecessary thread switching.\n",
              "meta": {},
              "items": []
            },
            {
              "content": "It prevents deadlocks in certain cases.\n",
              "meta": {},
              "items": []
            },
            {
              "content": "Essential for server-side apps and libraries.\n",
              "meta": {},
              "items": []
            },
            {
              "content": "Use carefully in UI apps to avoid updating controls on the wrong thread.\n",
              "meta": {},
              "items": []
            }
          ]
        }
      },
      {
        "id": "dkhgmbQaUD",
        "type": "header",
        "data": {
          "text": "Summary",
          "level": 2
        }
      },
      {
        "id": "F4--sR4dFC",
        "type": "paragraph",
        "data": {
          "text": "<code class=\"bg-[#303030] text-white font-mono px-1 py-[2px] rounded\">ConfigureAwait</code> might look small, but it can make a big difference in performance and reliability. Use it wisely to write fast, scalable, and deadlock-free async code."
        }
      }
    ],
    "version": "2.31.0-rc.7"
  }
}